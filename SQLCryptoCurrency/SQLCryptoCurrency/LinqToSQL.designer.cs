#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SQLCryptoCurrency
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="cryptocurrency")]
	public partial class LinqToSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCryptoCoin(CryptoCoin instance);
    partial void UpdateCryptoCoin(CryptoCoin instance);
    partial void DeleteCryptoCoin(CryptoCoin instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserCoin(UserCoin instance);
    partial void UpdateUserCoin(UserCoin instance);
    partial void DeleteUserCoin(UserCoin instance);
    #endregion
		
		public LinqToSQLDataContext() : 
				base(global::SQLCryptoCurrency.Properties.Settings.Default.cryptocurrencyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CryptoCoin> CryptoCoins
		{
			get
			{
				return this.GetTable<CryptoCoin>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserCoin> UserCoins
		{
			get
			{
				return this.GetTable<UserCoin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CryptoCoin")]
	public partial class CryptoCoin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CoinName;
		
		private string _CoinSymbol;
		
		private System.Nullable<int> _CoinRank;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<double> _Volume24H;
		
		private System.Nullable<double> _MarketCap;
		
		private System.Nullable<double> _PercentChange24H;
		
		private EntitySet<UserCoin> _UserCoins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoinNameChanging(string value);
    partial void OnCoinNameChanged();
    partial void OnCoinSymbolChanging(string value);
    partial void OnCoinSymbolChanged();
    partial void OnCoinRankChanging(System.Nullable<int> value);
    partial void OnCoinRankChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnVolume24HChanging(System.Nullable<double> value);
    partial void OnVolume24HChanged();
    partial void OnMarketCapChanging(System.Nullable<double> value);
    partial void OnMarketCapChanged();
    partial void OnPercentChange24HChanging(System.Nullable<double> value);
    partial void OnPercentChange24HChanged();
    #endregion
		
		public CryptoCoin()
		{
			this._UserCoins = new EntitySet<UserCoin>(new Action<UserCoin>(this.attach_UserCoins), new Action<UserCoin>(this.detach_UserCoins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoinName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CoinName
		{
			get
			{
				return this._CoinName;
			}
			set
			{
				if ((this._CoinName != value))
				{
					this.OnCoinNameChanging(value);
					this.SendPropertyChanging();
					this._CoinName = value;
					this.SendPropertyChanged("CoinName");
					this.OnCoinNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoinSymbol", DbType="NVarChar(10)")]
		public string CoinSymbol
		{
			get
			{
				return this._CoinSymbol;
			}
			set
			{
				if ((this._CoinSymbol != value))
				{
					this.OnCoinSymbolChanging(value);
					this.SendPropertyChanging();
					this._CoinSymbol = value;
					this.SendPropertyChanged("CoinSymbol");
					this.OnCoinSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoinRank", DbType="Int")]
		public System.Nullable<int> CoinRank
		{
			get
			{
				return this._CoinRank;
			}
			set
			{
				if ((this._CoinRank != value))
				{
					this.OnCoinRankChanging(value);
					this.SendPropertyChanging();
					this._CoinRank = value;
					this.SendPropertyChanged("CoinRank");
					this.OnCoinRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume24H", DbType="Float")]
		public System.Nullable<double> Volume24H
		{
			get
			{
				return this._Volume24H;
			}
			set
			{
				if ((this._Volume24H != value))
				{
					this.OnVolume24HChanging(value);
					this.SendPropertyChanging();
					this._Volume24H = value;
					this.SendPropertyChanged("Volume24H");
					this.OnVolume24HChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketCap", DbType="Float")]
		public System.Nullable<double> MarketCap
		{
			get
			{
				return this._MarketCap;
			}
			set
			{
				if ((this._MarketCap != value))
				{
					this.OnMarketCapChanging(value);
					this.SendPropertyChanging();
					this._MarketCap = value;
					this.SendPropertyChanged("MarketCap");
					this.OnMarketCapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentChange24H", DbType="Float")]
		public System.Nullable<double> PercentChange24H
		{
			get
			{
				return this._PercentChange24H;
			}
			set
			{
				if ((this._PercentChange24H != value))
				{
					this.OnPercentChange24HChanging(value);
					this.SendPropertyChanging();
					this._PercentChange24H = value;
					this.SendPropertyChanged("PercentChange24H");
					this.OnPercentChange24HChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CryptoCoin_UserCoin", Storage="_UserCoins", ThisKey="CoinName", OtherKey="CoinName")]
		public EntitySet<UserCoin> UserCoins
		{
			get
			{
				return this._UserCoins;
			}
			set
			{
				this._UserCoins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCoins(UserCoin entity)
		{
			this.SendPropertyChanging();
			entity.CryptoCoin = this;
		}
		
		private void detach_UserCoins(UserCoin entity)
		{
			this.SendPropertyChanging();
			entity.CryptoCoin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Password;
		
		private System.Nullable<int> _FailedLoginAttempts;
		
		private string _Email;
		
		private EntitySet<UserCoin> _UserCoins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFailedLoginAttemptsChanging(System.Nullable<int> value);
    partial void OnFailedLoginAttemptsChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._UserCoins = new EntitySet<UserCoin>(new Action<UserCoin>(this.attach_UserCoins), new Action<UserCoin>(this.detach_UserCoins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(30)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50)")]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50)")]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedLoginAttempts", DbType="Int")]
		public System.Nullable<int> FailedLoginAttempts
		{
			get
			{
				return this._FailedLoginAttempts;
			}
			set
			{
				if ((this._FailedLoginAttempts != value))
				{
					this.OnFailedLoginAttemptsChanging(value);
					this.SendPropertyChanging();
					this._FailedLoginAttempts = value;
					this.SendPropertyChanged("FailedLoginAttempts");
					this.OnFailedLoginAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCoin", Storage="_UserCoins", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserCoin> UserCoins
		{
			get
			{
				return this._UserCoins;
			}
			set
			{
				this._UserCoins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCoins(UserCoin entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserCoins(UserCoin entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCoins")]
	public partial class UserCoin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UserID;
		
		private string _CoinName;
		
		private System.Nullable<double> _Amount;
		
		private EntityRef<CryptoCoin> _CryptoCoin;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnCoinNameChanging(string value);
    partial void OnCoinNameChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    #endregion
		
		public UserCoin()
		{
			this._CryptoCoin = default(EntityRef<CryptoCoin>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoinName", DbType="NVarChar(50)")]
		public string CoinName
		{
			get
			{
				return this._CoinName;
			}
			set
			{
				if ((this._CoinName != value))
				{
					if (this._CryptoCoin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoinNameChanging(value);
					this.SendPropertyChanging();
					this._CoinName = value;
					this.SendPropertyChanged("CoinName");
					this.OnCoinNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CryptoCoin_UserCoin", Storage="_CryptoCoin", ThisKey="CoinName", OtherKey="CoinName", IsForeignKey=true)]
		public CryptoCoin CryptoCoin
		{
			get
			{
				return this._CryptoCoin.Entity;
			}
			set
			{
				CryptoCoin previousValue = this._CryptoCoin.Entity;
				if (((previousValue != value) 
							|| (this._CryptoCoin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CryptoCoin.Entity = null;
						previousValue.UserCoins.Remove(this);
					}
					this._CryptoCoin.Entity = value;
					if ((value != null))
					{
						value.UserCoins.Add(this);
						this._CoinName = value.CoinName;
					}
					else
					{
						this._CoinName = default(string);
					}
					this.SendPropertyChanged("CryptoCoin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCoin", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserCoins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserCoins.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
